#include "SolverTest.h"

CPPUNIT_TEST_SUITE_REGISTRATION(SolverTest);

SolverTest::SolverTest(){
	#ifdef _DATATESTPATH // from CMakeLists file
		m_data_path = _DATATESTPATH;
	#else
		// default path
		m_data_path = std::string("../tests/data");
	#endif
}

SolverTest::~SolverTest(){
}

void
SolverTest::setUp(){
}

void
SolverTest::tearDown(){
}

void
SolverTest::basic_tests(){
	TrussSolverType solver_t = TrussSolverType();
	BeamSolverType  solver_b = BeamSolverType();
}

void
SolverTest::horizontal_beam_test(void){
	/*
	 * Study case:
	 *
	 *            | 5kN
	 *            |
	 *           \/
	 * .---------.---------.
	 * /\        /\         
	 *
	 * |_________|_________|
	 *      2m        2m
	 *
	 * BarElementTest::truss_stiffness_tests
	 * Numerical solutions have been generated by the Matlab code presented in 
	 * "A 3D Finite Element modeling composite wind tubine wings" by R. DE FRIA LOPE.
	 */
	Point *p0 = PointManager::GetInstance().GetPoint(0.0,0.0,0.0),
	      *p1 = PointManager::GetInstance().GetPoint(2.0,0.0,0.0),
	      *p2 = PointManager::GetInstance().GetPoint(4.0,0.0,0.0);

	float cross_sec =  23E-4, // in m^2
				alpha = 0.0;

	Material m = BASIC_C;

	int N = 3; // number of points
	arma::umat test;
	StiffnessMatrixType expected;

	// load the data
	bool check = expected.load(m_data_path + std::string("/Kg_Ctwo_horizontal_beams.mat"));
	CPPUNIT_ASSERT_EQUAL_MESSAGE(
			"We couldn't open the file Kg_Ctwo_horizontal_beams, may be you haven't run Matlab script",
			check,
			true
	);

	// create the barElement
	BeamBarElement b1 = BeamBarElement(p0, p1, cross_sec, m, alpha);
	BeamBarElement b2 = BeamBarElement(p1, p2, cross_sec, m, alpha);

	// create the stiffness builder
	BeamStiffnessBuilder builder = BeamStiffnessBuilder(N);
	builder.Build(b1.GetStiffnessMatrix(), {0,1});
	builder.Build(b2.GetStiffnessMatrix(), {1,2});
	
	test = arma::abs(expected-builder.GetStiffnessMatrix())<1E-6;
	CPPUNIT_ASSERT_EQUAL_MESSAGE(
			"We expect to find the same stiffness matrix as the file.",
			(int)(N*6*N*6),
			static_cast<int>(sum(sum(test,1)))
	);

	// solve the system
}

void
SolverTest::truss_triangle_tests(void){
}

void
SolverTest::beam_triangle_tests(void){
	/*
	 * Study case:
	 *
	 *      |
	 *      | 10kN
	 *     \/     _
	 *     /|    |
	 *    / |    | 2m
	 *   /  |    |
	 *   ----    -
	 * /// ///
	 *
	 * |-----|
	 *   3.5m
	 *
	 * Numerical solutions have been generated by the Matlab code presented in 
	 * "A 3D Finite Element modeling composite wind tubine wings" by R. DE FRIA LOPE.
	 */   
}

void
SolverTest::truss_frame_tests(void){
}

void
SolverTest::beam_frame_tests(void){
}
