/*_____________________________________________________________

This is a simple version of the building structure design with 
genetic algorithm.
_______________________________________________________________*/

// =================== FUNCTIONS AND CONSTANTS =================== 

\User declarations : // This section is copied on top of the output file
#define SIGMA 1.0 // mutation parameter
#define GENOME_SIZE 3 // 3 parameters are required to define the v0.1 structure
// first parameter height of the vertical truss
#define X1_MIN 1.5 // minimal value of the first parameter in meter
#define X1_MAX 4.0 // maximal value of the first parameter in meter
// second parameter height of the top corner
#define X2_MIN 0.5
#define X2_MAX 2.0
// third parameter, half of width
#define X3_MIN 4.0
#define X3_MAX 8.0
\end

\User functions:
\end

\User CUDA:
//Transfert some variables to GPU here (cudaMalloc, MemCpy)
\end

\Before everything else function:
//cout<<"Before everything else function called "<<endl;
\end

\After everything else function:
//cout << "After everything else function called" << endl;
\end

\At the beginning of each generation function:
//cout << "At the beginning of each generation function called" << endl;
\end

\At the end of each generation function:
//cout << "At the end of each generation function called" << endl;
\end

\At each generation before reduce function:
//cout << "At each generation before replacement function called" << endl;
\end

// =================== GENOME DEFINITION =================== 
\User classes :
GenomeClass { 
  // need to declare the genome here
	float x[GENOME_SIZE];
}
\end

\GenomeClass::display:
\end

\GenomeClass::initialiser : // "initializer" is also accepted
  // the genome to initialise is known as "Genome"
	Genome.x[0] = (float)random(X1_MIN,X1_MAX);
	Genome.x[1] = (float)random(X2_MIN,X2_MAX);
	Genome.x[2] = (float)random(X3_MIN,X3_MAX);
\end

\GenomeClass::crossover : 
  // must create "child" out of "parent1" and "parent2"
\end

\GenomeClass::mutator : // Must return the number of mutations
  // must mutate "Genome"
  return 0;
\end

\GenomeClass::evaluator : // Returns the score as a real value
  // uses Genome to evaluate the quality of the individual
  return 0.0;
\end

// =================== MAKEFILE =================== 

\User Makefile options: 
\end

// =================== PARAMETERS =================== 

\Default run parameters :        // Please let the parameters appear in this order
  Number of generations : 100    // NB_GEN
  Time limit: 0 			           // In seconds, 0 to deactivate
  Population size : 1024			   //POP_SIZE
  Offspring size : 1024 // or a xx%
  Mutation probability : 1       // MUT_PROB
  Crossover probability : 1      // XOVER_PROB
  Evaluator goal : maximize      // maximise
  Selection operator: Tournament 2.0
  Surviving parents: 100%        // Percentage or absolute  
  Surviving offspring: 100%      // Percentage or absolute  
  Reduce parents operator: Tournament 2
  Reduce offspring operator: Tournament 2
  Final reduce operator: Tournament 2

  Elitism: Strong			           // Weak or Strong
  Elite: 1
  Print stats: true				       // Default: 1
  Generate csv stats file:false			
  Generate gnuplot script:false
  Generate R script:false
  Plot stats:true				         // Default: 0

  Remote island model: false
  IP file: ip.txt 			         // List of IP:PORT of islands to send individuals to
  Migration probability: 0.33    // Probability of sending an individual per generation
  Server port : 2929

  Save population: false
  Start from file:false
\end

